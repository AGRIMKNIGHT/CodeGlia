{"version":"1.140.0","results":[{"check_id":"semgrep-rules.python.flask.security.audit.avoid_hardcoded_config_SECRET_KEY","path":"datasets/sample_injection.py","start":{"line":9,"col":1,"offset":186},"end":{"line":9,"col":59,"offset":244},"extra":{"message":"Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead","metadata":{"likelihood":"LOW","impact":"LOW","confidence":"LOW","category":"security","cwe":["CWE-489: Active Debug Code"],"owasp":["A05:2021 - Security Misconfiguration"],"references":["https://bento.dev/checks/flask/avoid-hardcoded-config/","https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values","https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"],"subcategory":["audit"],"technology":["flask"]},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.python.django.security.injection.command.command-injection-os-system","path":"datasets/sample_injection.py","start":{"line":14,"col":5,"offset":357},"end":{"line":22,"col":23,"offset":728},"extra":{"message":"Request data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection for more information.","metadata":{"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/www-community/attacks/Command_Injection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.python.lang.security.audit.dangerous-system-call-audit","path":"datasets/sample_injection.py","start":{"line":22,"col":5,"offset":710},"end":{"line":22,"col":23,"offset":728},"extra":{"message":"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.","metadata":{"source-rule-url":"https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html","cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"],"asvs":{"control_id":"5.2.4 Dyanmic Code Execution Features","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"category":"security","technology":["python"],"confidence":"LOW","cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.python.lang.security.dangerous-system-call","path":"datasets/sample_injection.py","start":{"line":22,"col":5,"offset":710},"end":{"line":22,"col":23,"offset":728},"extra":{"message":"Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.","metadata":{"source-rule-url":"https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html","cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"],"asvs":{"control_id":"5.2.4 Dyanmic Code Execution Features","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"category":"security","technology":["python"],"confidence":"MEDIUM","cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"HIGH"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.python.flask.security.injection.tainted-sql-string","path":"datasets/sample_injection.py","start":{"line":35,"col":13,"offset":1147},"end":{"line":35,"col":65,"offset":1199},"extra":{"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.python.lang.security.audit.formatted-sql-query","path":"datasets/sample_injection.py","start":{"line":36,"col":5,"offset":1204},"end":{"line":36,"col":26,"offset":1225},"extra":{"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query","path":"datasets/sample_injection.py","start":{"line":36,"col":5,"offset":1204},"end":{"line":36,"col":26,"offset":1225},"extra":{"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.python.flask.security.audit.avoid_hardcoded_config_SECRET_KEY","path":"datasets/uploaded_project/datasets/sample_injection.py","start":{"line":9,"col":1,"offset":186},"end":{"line":9,"col":59,"offset":244},"extra":{"message":"Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead","metadata":{"likelihood":"LOW","impact":"LOW","confidence":"LOW","category":"security","cwe":["CWE-489: Active Debug Code"],"owasp":["A05:2021 - Security Misconfiguration"],"references":["https://bento.dev/checks/flask/avoid-hardcoded-config/","https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values","https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"],"subcategory":["audit"],"technology":["flask"]},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.python.django.security.injection.command.command-injection-os-system","path":"datasets/uploaded_project/datasets/sample_injection.py","start":{"line":14,"col":5,"offset":357},"end":{"line":22,"col":23,"offset":728},"extra":{"message":"Request data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection for more information.","metadata":{"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/www-community/attacks/Command_Injection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.python.lang.security.audit.dangerous-system-call-audit","path":"datasets/uploaded_project/datasets/sample_injection.py","start":{"line":22,"col":5,"offset":710},"end":{"line":22,"col":23,"offset":728},"extra":{"message":"Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.","metadata":{"source-rule-url":"https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html","cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"],"asvs":{"control_id":"5.2.4 Dyanmic Code Execution Features","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"category":"security","technology":["python"],"confidence":"LOW","cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.python.lang.security.dangerous-system-call","path":"datasets/uploaded_project/datasets/sample_injection.py","start":{"line":22,"col":5,"offset":710},"end":{"line":22,"col":23,"offset":728},"extra":{"message":"Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.","metadata":{"source-rule-url":"https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html","cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"],"asvs":{"control_id":"5.2.4 Dyanmic Code Execution Features","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"category":"security","technology":["python"],"confidence":"MEDIUM","cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"HIGH"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.python.flask.security.injection.tainted-sql-string","path":"datasets/uploaded_project/datasets/sample_injection.py","start":{"line":35,"col":13,"offset":1147},"end":{"line":35,"col":65,"offset":1199},"extra":{"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.python.lang.security.audit.formatted-sql-query","path":"datasets/uploaded_project/datasets/sample_injection.py","start":{"line":36,"col":5,"offset":1204},"end":{"line":36,"col":26,"offset":1225},"extra":{"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query","path":"datasets/uploaded_project/datasets/sample_injection.py","start":{"line":36,"col":5,"offset":1204},"end":{"line":36,"col":26,"offset":1225},"extra":{"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.csharp.lang.security.sqli.csharp-sqli","path":"datasets/uploaded_project/datasets/vul.cs","start":{"line":23,"col":49,"offset":925},"end":{"line":23,"col":52,"offset":928},"extra":{"message":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.","metadata":{"category":"security","technology":["csharp"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"confidence":"MEDIUM","references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.java.lang.security.audit.sqli.tainted-sql-from-http-request","path":"datasets/uploaded_project/datasets/vul.java","start":{"line":23,"col":13,"offset":887},"end":{"line":23,"col":53,"offset":927},"extra":{"message":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead.","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html","https://owasp.org/www-community/attacks/SQL_Injection"],"subcategory":["vuln"],"technology":["sql","java","servlets","spring"]},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.java.lang.security.audit.formatted-sql-string","path":"datasets/uploaded_project/datasets/vul.java","start":{"line":23,"col":28,"offset":902},"end":{"line":23,"col":52,"offset":926},"extra":{"message":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"source-rule-url":"https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION","asvs":{"control_id":"5.3.5 Injection","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"references":["https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html","https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps","https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement"],"category":"security","technology":["java"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.java.lang.security.audit.xss.no-direct-response-writer","path":"datasets/uploaded_project/datasets/vul.java","start":{"line":25,"col":17,"offset":976},"end":{"line":25,"col":78,"offset":1037},"extra":{"message":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views.","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","category":"security","cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html"],"subcategory":["vuln"],"technology":["java","servlets"],"interfile":true},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.java.lang.security.audit.tainted-cmd-from-http-request","path":"datasets/uploaded_project/datasets/vul.java","start":{"line":35,"col":13,"offset":1381},"end":{"line":35,"col":72,"offset":1440},"extra":{"message":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values.","metadata":{"category":"security","technology":["java"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.java.lang.security.audit.xss.no-direct-response-writer","path":"datasets/uploaded_project/datasets/vul.java","start":{"line":39,"col":17,"offset":1630},"end":{"line":39,"col":47,"offset":1660},"extra":{"message":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views.","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","category":"security","cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html"],"subcategory":["vuln"],"technology":["java","servlets"],"interfile":true},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.php.lang.security.exec-use","path":"datasets/uploaded_project/datasets/vul.php","start":{"line":13,"col":5,"offset":430},"end":{"line":13,"col":48,"offset":473},"extra":{"message":"Executing non-constant commands. This can lead to command injection.","metadata":{"cwe":["CWE-94: Improper Control of Generation of Code ('Code Injection')"],"references":["https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/SystemExecFunctionsSniff.php"],"category":"security","technology":["php"],"owasp":["A03:2021 - Injection"],"cwe2022-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.php.lang.security.injection.tainted-exec","path":"datasets/uploaded_project/datasets/vul.php","start":{"line":13,"col":15,"offset":440},"end":{"line":13,"col":47,"offset":472},"extra":{"message":"User input is passed to a function that executes a shell command. This can lead to remote code execution.","metadata":{"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"category":"security","technology":["php"],"owasp":["A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"subcategory":["vuln"],"impact":"HIGH","likelihood":"MEDIUM","confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.php.lang.security.tainted-exec","path":"datasets/uploaded_project/datasets/vul.php","start":{"line":13,"col":15,"offset":440},"end":{"line":13,"col":47,"offset":472},"extra":{"message":"Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.","metadata":{"cwe":["CWE-94: Improper Control of Generation of Code ('Code Injection')"],"references":["https://www.stackhawk.com/blog/php-command-injection/","https://brightsec.com/blog/code-injection-php/","https://www.acunetix.com/websitesecurity/php-security-2/"],"category":"security","technology":["php"],"owasp":["A03:2021 - Injection"],"cwe2022-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"HIGH","confidence":"MEDIUM"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.c.lang.security.insecure-use-string-copy-fn","path":"datasets/uploaded_project/datasets/vuln.c","start":{"line":11,"col":5,"offset":340},"end":{"line":11,"col":26,"offset":361},"extra":{"message":"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available).","metadata":{"cwe":["CWE-676: Use of Potentially Dangerous Function"],"references":["https://cwe.mitre.org/data/definitions/676","https://nvd.nist.gov/vuln/detail/CVE-2019-11365"],"category":"security","technology":["c"],"confidence":"LOW","subcategory":["audit"],"likelihood":"LOW","impact":"HIGH"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.csharp.lang.security.sqli.csharp-sqli","path":"datasets/vul.cs","start":{"line":23,"col":49,"offset":925},"end":{"line":23,"col":52,"offset":928},"extra":{"message":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.","metadata":{"category":"security","technology":["csharp"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"confidence":"MEDIUM","references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.java.lang.security.audit.sqli.tainted-sql-from-http-request","path":"datasets/vul.java","start":{"line":23,"col":13,"offset":887},"end":{"line":23,"col":53,"offset":927},"extra":{"message":"Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead.","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html","https://owasp.org/www-community/attacks/SQL_Injection"],"subcategory":["vuln"],"technology":["sql","java","servlets","spring"]},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.java.lang.security.audit.formatted-sql-string","path":"datasets/vul.java","start":{"line":23,"col":28,"offset":902},"end":{"line":23,"col":52,"offset":926},"extra":{"message":"Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"source-rule-url":"https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION","asvs":{"control_id":"5.3.5 Injection","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"references":["https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html","https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps","https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement"],"category":"security","technology":["java"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.java.lang.security.audit.xss.no-direct-response-writer","path":"datasets/vul.java","start":{"line":25,"col":17,"offset":976},"end":{"line":25,"col":78,"offset":1037},"extra":{"message":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views.","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","category":"security","cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html"],"subcategory":["vuln"],"technology":["java","servlets"],"interfile":true},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.java.lang.security.audit.tainted-cmd-from-http-request","path":"datasets/vul.java","start":{"line":35,"col":13,"offset":1381},"end":{"line":35,"col":72,"offset":1440},"extra":{"message":"Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values.","metadata":{"category":"security","technology":["java"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.java.lang.security.audit.xss.no-direct-response-writer","path":"datasets/vul.java","start":{"line":39,"col":17,"offset":1630},"end":{"line":39,"col":47,"offset":1660},"extra":{"message":"Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views.","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","category":"security","cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html"],"subcategory":["vuln"],"technology":["java","servlets"],"interfile":true},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.php.lang.security.exec-use","path":"datasets/vul.php","start":{"line":13,"col":5,"offset":430},"end":{"line":13,"col":48,"offset":473},"extra":{"message":"Executing non-constant commands. This can lead to command injection.","metadata":{"cwe":["CWE-94: Improper Control of Generation of Code ('Code Injection')"],"references":["https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/SystemExecFunctionsSniff.php"],"category":"security","technology":["php"],"owasp":["A03:2021 - Injection"],"cwe2022-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.php.lang.security.injection.tainted-exec","path":"datasets/vul.php","start":{"line":13,"col":15,"offset":440},"end":{"line":13,"col":47,"offset":472},"extra":{"message":"User input is passed to a function that executes a shell command. This can lead to remote code execution.","metadata":{"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"category":"security","technology":["php"],"owasp":["A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"subcategory":["vuln"],"impact":"HIGH","likelihood":"MEDIUM","confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.php.lang.security.tainted-exec","path":"datasets/vul.php","start":{"line":13,"col":15,"offset":440},"end":{"line":13,"col":47,"offset":472},"extra":{"message":"Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.","metadata":{"cwe":["CWE-94: Improper Control of Generation of Code ('Code Injection')"],"references":["https://www.stackhawk.com/blog/php-command-injection/","https://brightsec.com/blog/code-injection-php/","https://www.acunetix.com/websitesecurity/php-security-2/"],"category":"security","technology":["php"],"owasp":["A03:2021 - Injection"],"cwe2022-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"HIGH","confidence":"MEDIUM"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.c.lang.security.insecure-use-string-copy-fn","path":"datasets/vuln.c","start":{"line":11,"col":5,"offset":340},"end":{"line":11,"col":26,"offset":361},"extra":{"message":"Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available).","metadata":{"cwe":["CWE-676: Use of Potentially Dangerous Function"],"references":["https://cwe.mitre.org/data/definitions/676","https://nvd.nist.gov/vuln/detail/CVE-2019-11365"],"category":"security","technology":["c"],"confidence":"LOW","subcategory":["audit"],"likelihood":"LOW","impact":"HIGH"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}}],"errors":[],"paths":{"scanned":["datasets/.DS_Store","datasets/sample_injection.py","datasets/uploaded_project/datasets/.DS_Store","datasets/uploaded_project/datasets/sample_injection.py","datasets/uploaded_project/datasets/vul.cs","datasets/uploaded_project/datasets/vul.java","datasets/uploaded_project/datasets/vul.php","datasets/uploaded_project/datasets/vuln.c","datasets/vul.cs","datasets/vul.java","datasets/vul.php","datasets/vuln.c"]},"time":{"rules":[],"rules_parse_time":0.47786903381347656,"profiling_times":{"config_time":13.800020217895508,"core_time":1.082101821899414,"ignores_time":0.000858306884765625,"total_time":14.883238077163696},"parsing_time":{"total_time":0.0,"per_file_time":{"mean":0.0,"std_dev":0.0},"very_slow_stats":{"time_ratio":0.0,"count_ratio":0.0},"very_slow_files":[]},"scanning_time":{"total_time":0.7369225025177002,"per_file_time":{"mean":0.021674191250520593,"std_dev":0.0005731994812233029},"very_slow_stats":{"time_ratio":0.0,"count_ratio":0.0},"very_slow_files":[]},"matching_time":{"total_time":0.0,"per_file_and_rule_time":{"mean":0.0,"std_dev":0.0},"very_slow_stats":{"time_ratio":0.0,"count_ratio":0.0},"very_slow_rules_on_files":[]},"tainting_time":{"total_time":0.0,"per_def_and_rule_time":{"mean":0.0,"std_dev":0.0},"very_slow_stats":{"time_ratio":0.0,"count_ratio":0.0},"very_slow_rules_on_defs":[]},"fixpoint_timeouts":[],"prefiltering":{"project_level_time":0.0,"file_level_time":0.0,"rules_with_project_prefilters_ratio":0.0,"rules_with_file_prefilters_ratio":0.9817721518987341,"rules_selected_ratio":0.1660759493670886,"rules_matched_ratio":0.1660759493670886},"targets":[],"total_bytes":0,"max_memory_bytes":842114048},"engine_requested":"OSS","skipped_rules":[]}